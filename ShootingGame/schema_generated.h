// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct pos;

struct contents;
struct contentsBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) pos FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  pos()
      : x_(0),
        y_(0) {
  }
  pos(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(pos, 8);

struct contents FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef contentsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERPOS = 4,
    VT_PLAYER1SCORE = 6,
    VT_PLAYER2SCORE = 8,
    VT_PLAYERTURN = 10
  };
  const pos *playerPos() const {
    return GetStruct<const pos *>(VT_PLAYERPOS);
  }
  int32_t Player1Score() const {
    return GetField<int32_t>(VT_PLAYER1SCORE, 0);
  }
  int32_t Player2Score() const {
    return GetField<int32_t>(VT_PLAYER2SCORE, 0);
  }
  int32_t PlayerTurn() const {
    return GetField<int32_t>(VT_PLAYERTURN, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<pos>(verifier, VT_PLAYERPOS) &&
           VerifyField<int32_t>(verifier, VT_PLAYER1SCORE) &&
           VerifyField<int32_t>(verifier, VT_PLAYER2SCORE) &&
           VerifyField<int32_t>(verifier, VT_PLAYERTURN) &&
           verifier.EndTable();
  }
};

struct contentsBuilder {
  typedef contents Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_playerPos(const pos *playerPos) {
    fbb_.AddStruct(contents::VT_PLAYERPOS, playerPos);
  }
  void add_Player1Score(int32_t Player1Score) {
    fbb_.AddElement<int32_t>(contents::VT_PLAYER1SCORE, Player1Score, 0);
  }
  void add_Player2Score(int32_t Player2Score) {
    fbb_.AddElement<int32_t>(contents::VT_PLAYER2SCORE, Player2Score, 0);
  }
  void add_PlayerTurn(int32_t PlayerTurn) {
    fbb_.AddElement<int32_t>(contents::VT_PLAYERTURN, PlayerTurn, 0);
  }
  explicit contentsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<contents> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<contents>(end);
    return o;
  }
};

inline flatbuffers::Offset<contents> Createcontents(
    flatbuffers::FlatBufferBuilder &_fbb,
    const pos *playerPos = 0,
    int32_t Player1Score = 0,
    int32_t Player2Score = 0,
    int32_t PlayerTurn = 0) {
  contentsBuilder builder_(_fbb);
  builder_.add_PlayerTurn(PlayerTurn);
  builder_.add_Player2Score(Player2Score);
  builder_.add_Player1Score(Player1Score);
  builder_.add_playerPos(playerPos);
  return builder_.Finish();
}

inline const contents *Getcontents(const void *buf) {
  return flatbuffers::GetRoot<contents>(buf);
}

inline const contents *GetSizePrefixedcontents(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<contents>(buf);
}

inline bool VerifycontentsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<contents>(nullptr);
}

inline bool VerifySizePrefixedcontentsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<contents>(nullptr);
}

inline void FinishcontentsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<contents> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedcontentsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<contents> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
